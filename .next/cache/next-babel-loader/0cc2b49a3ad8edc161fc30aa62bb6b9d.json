{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Document from 'next/document';\n\nfunction CustomDocument() {\n  console.log('custom');\n}\n\nCustomDocument.getInitialProps = async ctx => {\n  const originalRenderPage = ctx.renderPage;\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread({}, initialProps);\n};\n\nexport default CustomDocument;","map":{"version":3,"sources":["C:/Users/jin_a/Desktop/Study/Service/cocstorage-new/src/pages/_document.tsx"],"names":["Document","CustomDocument","console","log","getInitialProps","ctx","originalRenderPage","renderPage","initialProps"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAA0C,eAA1C;;AAEA,SAASC,cAAT,GAA0B;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA;;AAEDF,cAAc,CAACG,eAAf,GAAiC,MAAOC,GAAP,IAAgC;AAChE,QAAMC,kBAAkB,GAAGD,GAAG,CAACE,UAA/B;AAEA,QAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACI,eAAT,CAAyBC,GAAzB,CAA3B;AAEA,2BACIG,YADJ;AAGA,CARD;;AAUA,eAAeP,cAAf","sourcesContent":["import Document, { DocumentContext } from 'next/document';\n\nfunction CustomDocument() {\n\tconsole.log('custom');\n}\n\nCustomDocument.getInitialProps = async (ctx: DocumentContext) => {\n\tconst originalRenderPage = ctx.renderPage;\n\n\tconst initialProps = await Document.getInitialProps(ctx);\n\n\treturn {\n\t\t...initialProps,\n\t};\n};\n\nexport default CustomDocument;\n"]},"metadata":{},"sourceType":"module"}