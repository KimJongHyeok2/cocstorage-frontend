{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Document from 'next/document';\n\nclass CustomDocument extends Document {\n  static async getInitialProps(ctx) {\n    // const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage; // eslint-disable-next-line no-useless-catch\n\n    try {\n      // ctx.renderPage = () =>\n      // \toriginalRenderPage({\n      // \t\tenhanceApp: App => props => sheet.collectStyles(<App {...props} />)\n      // \t});\n      const initialProps = await Document.getInitialProps(ctx);\n      return _objectSpread({}, initialProps, {\n        styles: initialProps.styles\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n}\n\nexport default CustomDocument;","map":{"version":3,"sources":["C:/Users/jin_a/Desktop/Study/Service/cocstorage-new/src/pages/_document.tsx"],"names":["Document","CustomDocument","getInitialProps","ctx","originalRenderPage","renderPage","initialProps","styles","error"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAA0C,eAA1C;;AAEA,MAAMC,cAAN,SAA6BD,QAA7B,CAAsC;AACrC,eAAaE,eAAb,CAA6BC,GAA7B,EAAmD;AAClD;AACA,UAAMC,kBAAkB,GAAGD,GAAG,CAACE,UAA/B,CAFkD,CAIlD;;AACA,QAAI;AACH;AACA;AACA;AACA;AAEA,YAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACE,eAAT,CAAyBC,GAAzB,CAA3B;AAEA,+BACIG,YADJ;AAECC,QAAAA,MAAM,EAAGD,YAAY,CAACC;AAFvB;AAIA,KAZD,CAYE,OAAOC,KAAP,EAAc;AACf,YAAMA,KAAN;AACA;AACD;;AArBoC;;AAwBtC,eAAeP,cAAf","sourcesContent":["import Document, { DocumentContext } from 'next/document';\n\nclass CustomDocument extends Document {\n\tstatic async getInitialProps(ctx: DocumentContext) {\n\t\t// const sheet = new ServerStyleSheet();\n\t\tconst originalRenderPage = ctx.renderPage;\n\n\t\t// eslint-disable-next-line no-useless-catch\n\t\ttry {\n\t\t\t// ctx.renderPage = () =>\n\t\t\t// \toriginalRenderPage({\n\t\t\t// \t\tenhanceApp: App => props => sheet.collectStyles(<App {...props} />)\n\t\t\t// \t});\n\n\t\t\tconst initialProps = await Document.getInitialProps(ctx);\n\n\t\t\treturn {\n\t\t\t\t...initialProps,\n\t\t\t\tstyles: (initialProps.styles)\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nexport default CustomDocument;\n"]},"metadata":{},"sourceType":"module"}